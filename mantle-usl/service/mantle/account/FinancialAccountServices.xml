<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-1.5.xsd">

    <service verb="get" noun="StatementPrintInfo">
        <in-parameters>
            <parameter name="finAccountId" required="true"/>
            <parameter name="year"/>
            <parameter name="month"/>
            <parameter name="fromDate" type="Timestamp"/>
            <parameter name="thruDate" type="Timestamp"/>
        </in-parameters>
        <out-parameters>
            <parameter name="financialAccount" type="EntityValue"/>
            <parameter name="ownerDetail" type="EntityValue"/>
            <parameter name="organizationDetail" type="EntityValue"/>
            <parameter name="financialAccountTransList" type="EntityList"/>

            <parameter name="fromDate" type="Timestamp"/>
            <parameter name="thruDate" type="Timestamp"/>
            <parameter name="beginningBalance" type="BigDecimal"/>
            <parameter name="endingBalance" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.financial.FinancialAccount" value-field="financialAccount"/>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="ownerDetail">
                <field-map field-name="partyId" from="financialAccount.ownerPartyId"/></entity-find-one>
            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="organizationDetail">
                <field-map field-name="partyId" from="financialAccount.organizationPartyId"/></entity-find-one>

            <script><![CDATA[
                if (fromDate == null && thruDate == null && year && month) {
                    fromCal = ec.l10n.parseDateTime("${year}-${month}-01 00:00:00", "yyyy-MM-dd HH:mm:ss")
                    thruCal = fromCal.clone()
                    thruCal.add(Calendar.MONTH, 1)
                    thruCal.add(Calendar.SECOND, -1)

                    fromDate = new Timestamp(fromCal.getTimeInMillis())
                    thruDate = new Timestamp(thruCal.getTimeInMillis())
                }
            ]]></script>

            <entity-find entity-name="mantle.account.financial.FinancialAccountTrans" list="financialAccountTransList">
                <econdition field-name="finAccountId"/>
                <econdition field-name="transactionDate" operator="greater-equals" from="fromDate" ignore-if-empty="true"/>
                <econdition field-name="transactionDate" operator="less-equals" from="thruDate" ignore-if-empty="true"/>
                <order-by field-name="transactionDate"/>
            </entity-find>

            <set field="firstTrans" from="financialAccountTransList ? financialAccountTransList.first() : null"/>
            <set field="beginningBalance" from="(firstTrans?.get('postBalance') ?: 0) - (firstTrans?.get('amount') ?: 0)"/>
            <set field="lastTrans" from="financialAccountTransList ? financialAccountTransList.last() : null"/>
            <set field="endingBalance" from="lastTrans?.get('postBalance') ?: 0"/>
        </actions>
    </service>

    <service verb="create" noun="FinancialAccount">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.financial.FinancialAccount" include="nonpk">
                <exclude field-name="actualBalance"/><exclude field-name="availableBalance"/>
            </auto-parameters>
            <parameter name="finAccountTypeId" required="true"/>
            <parameter name="finAccountName" required="true"/>
            <parameter name="organizationPartyId" required="true"/>
            <parameter name="ownerPartyId" required="true"/>
            <parameter name="statusId" default-value="FaActive"/>
            <parameter name="isRefundable"><description>Defaults to FinancialAccountType.isRefundable</description></parameter>
            <parameter name="currencyUomId"><description>Defaults to PartyAcctgPreference.baseCurrencyUomId for organizationPartyId.</description></parameter>
        </in-parameters>
        <out-parameters><parameter name="finAccountId"/></out-parameters>
        <actions>
            <if condition="!isRefundable">
                <entity-find-one entity-name="mantle.account.financial.FinancialAccountType" value-field="financialAccountType"/>
                <set field="isRefundable" from="financialAccountType?.isRefundable"/>
            </if>
            <if condition="!currencyUomId">
                <service-call name="mantle.ledger.LedgerServices.find#PartyAcctgPreference" out-map="context"
                        in-map="[organizationPartyId:organizationPartyId]"/>
                <set field="currencyUomId" from="partyAcctgPreference.baseCurrencyUomId"/>
            </if>
            <if condition="!currencyUomId"><set field="currencyUomId" value="USD"/></if>

            <service-call name="create#mantle.account.financial.FinancialAccount" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="update" noun="FinancialAccount">
        <in-parameters>
            <parameter name="finAccountId" required="true"/>
            <auto-parameters entity-name="mantle.account.financial.FinancialAccount" include="nonpk">
                <exclude field-name="actualBalance"/><exclude field-name="availableBalance"/>
            </auto-parameters>
        </in-parameters>
        <actions>
            <service-call name="update#mantle.account.financial.FinancialAccount" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="calculate" noun="FinancialAccountTotals">
        <description>Calculates totals from FinancialAccountTrans and FinancialAccountAuth records, records them
            on the FinancialAccount record and returns them.</description>
        <in-parameters>
            <parameter name="finAccountId"/>
            <parameter name="finAccountTransId"/>
            <parameter name="finAccountAuthId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="currencyUomId"/>
            <parameter name="actualBalance" type="BigDecimal"/>
            <parameter name="authBalance" type="BigDecimal"/>
            <parameter name="availableBalance" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <if condition="!finAccountId &amp;&amp; finAccountTransId">
                <entity-find-one entity-name="mantle.account.financial.FinancialAccountTrans" value-field="fat"/>
                <set field="finAccountId" from="fat?.finAccountId"/>
            </if>
            <if condition="!finAccountId &amp;&amp; finAccountAuthId">
                <entity-find-one entity-name="mantle.account.financial.FinancialAccountAuth" value-field="faa"/>
                <set field="finAccountId" from="faa?.finAccountId"/>
            </if>
            <if condition="!finAccountId"><return error="true" message="Cannot calculate Financial Account totals, no finAccountId passed"/></if>

            <entity-find-one entity-name="mantle.account.financial.FinancialAccount" value-field="financialAccount"
                    for-update="true"/>
            <set field="currencyUomId" from="financialAccount.currencyUomId"/>

            <entity-find entity-name="mantle.account.financial.FinancialAccountActualView" list="faaList">
                <econdition field-name="finAccountId"/></entity-find>
            <set field="actualBalance" from="faaList?.first?.actualBalance ?: 0"/>

            <entity-find entity-name="mantle.account.financial.FinancialAccountAuthView" list="faaList">
                <econdition field-name="finAccountId"/>
                <econdition field-name="expireDate" operator="greater" from="ec.user.nowTimestamp" or-null="true"/>
                <select-field field-name="finAccountId"/><select-field field-name="authBalance"/>
            </entity-find>
            <set field="authBalance" from="faaList?.first?.authBalance ?: 0"/>

            <set field="availableBalance" from="actualBalance - authBalance"/>

            <set field="financialAccount.actualBalance" from="actualBalance"/>
            <set field="financialAccount.availableBalance" from="availableBalance"/>
            <entity-update value-field="financialAccount"/>
        </actions>
    </service>

    <service verb="adjust" noun="FinancialAccount">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.financial.FinancialAccountTrans" include="nonpk">
                <exclude field-name="finAccountTransTypeEnumId"/>
                <exclude field-name="finAccountAuthId"/>
            </auto-parameters>
            <parameter name="finAccountId" required="true"/>
            <parameter name="reasonEnumId" default-value="FatrErrorAdjust"/>
            <parameter name="amount" type="BigDecimal" required="true"/>
            <parameter name="transactionDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <!-- maybe support in the future with currency conversion: <parameter name="amountUomId"/> -->
            <!-- <parameter name="isRefund" type="Boolean" default-value="false"/> -->
        </in-parameters>
        <out-parameters>
            <parameter name="amount" type="BigDecimal"/>
            <parameter name="preBalance" type="BigDecimal"/>
            <parameter name="postBalance" type="BigDecimal"/>
            <parameter name="finAccountTransId"/>
        </out-parameters>
        <actions>
            <set field="amount" from="amount.setScale(2, BigDecimal.ROUND_HALF_UP)"/>
            <set field="performedByUserId" from="ec.user.userId"/>

            <!-- do a for-update query to lock the FinancialAccount record -->
            <entity-find-one entity-name="mantle.account.financial.FinancialAccount" value-field="financialAccount"
                    for-update="true"/>
            <set field="preBalance" from="financialAccount.actualBalance ?: 0"/>

            <set field="postBalance" from="preBalance + amount"/>
            <set field="finAccountTransTypeEnumId" value="FattAdjustment"/>
            <service-call name="create#mantle.account.financial.FinancialAccountTrans" in-map="context" out-map="context"/>

            <service-call name="mantle.account.FinancialAccountServices.calculate#FinancialAccountTotals"
                    in-map="[finAccountId:finAccountId]" out-map="totalsOut"/>
            <set field="postBalance" from="totalsOut.actualBalance"/>
            <set field="differAmount" from="postBalance - preBalance"/>
            <if condition="differAmount != amount">
                <return error="true" message="Error adjusting financial account ${ec.resource.expand('FinancialAccountNameTemplate','',financialAccount)}, pre balance ${preBalance} and post balance ${postBalance} differ by ${differAmount} and not by transaction amount ${amount}"/>
            </if>
        </actions>
    </service>

    <service verb="deposit" noun="FinancialAccount">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.financial.FinancialAccountTrans" include="nonpk">
                <exclude field-name="finAccountTransTypeEnumId"/>
                <exclude field-name="finAccountAuthId"/>
            </auto-parameters>
            <parameter name="finAccountId" required="true"/>
            <parameter name="reasonEnumId" default-value="FatrReplenish"/>
            <parameter name="amount" type="BigDecimal" required="true"/>
            <parameter name="transactionDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <!-- maybe support in the future with currency conversion: <parameter name="amountUomId"/> -->
            <!-- <parameter name="isRefund" type="Boolean" default-value="false"/> -->
        </in-parameters>
        <out-parameters>
            <parameter name="amount" type="BigDecimal"/>
            <parameter name="preBalance" type="BigDecimal"/>
            <parameter name="postBalance" type="BigDecimal"/>
            <parameter name="finAccountTransId"/>
        </out-parameters>
        <actions>
            <set field="amount" from="amount.setScale(2, BigDecimal.ROUND_HALF_UP)"/>
            <set field="performedByUserId" from="ec.user.userId"/>

            <!-- do a for-update query to lock the FinancialAccount record -->
            <entity-find-one entity-name="mantle.account.financial.FinancialAccount" value-field="financialAccount"
                    for-update="true"/>
            <set field="preBalance" from="financialAccount.actualBalance ?: 0"/>

            <if condition="!fromPartyId"><set field="fromPartyId" from="financialAccount.organizationPartyId"/></if>
            <if condition="!toPartyId"><set field="toPartyId" from="financialAccount.ownerPartyId"/></if>

            <set field="postBalance" from="preBalance + amount"/>
            <set field="finAccountTransTypeEnumId" value="FattDeposit"/>
            <service-call name="create#mantle.account.financial.FinancialAccountTrans" in-map="context" out-map="context"/>

            <service-call name="mantle.account.FinancialAccountServices.calculate#FinancialAccountTotals"
                    in-map="[finAccountId:finAccountId]" out-map="totalsOut"/>
            <set field="postBalance" from="totalsOut.actualBalance"/>
            <set field="differAmount" from="postBalance - preBalance"/>
            <if condition="differAmount != amount">
                <return error="true" message="Error adjusting financial account ${ec.resource.expand('FinancialAccountNameTemplate','',financialAccount)}, pre balance ${preBalance} and post balance ${postBalance} differ by ${differAmount} and not by transaction amount ${amount}"/>
            </if>
        </actions>
    </service>
    <service verb="withdraw" noun="FinancialAccount">
        <in-parameters>
            <auto-parameters entity-name="mantle.account.financial.FinancialAccountTrans" include="nonpk">
                <exclude field-name="finAccountTransTypeEnumId"/>
            </auto-parameters>
            <parameter name="finAccountId" required="true"/>
            <parameter name="reasonEnumId" default-value="FatrDisbursement"/>
            <parameter name="amount" type="BigDecimal" required="true"/>
            <parameter name="transactionDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <!-- maybe support in the future with currency conversion: <parameter name="amountUomId"/> -->
            <!-- <parameter name="isRefund" type="Boolean" default-value="false"/> -->
        </in-parameters>
        <out-parameters>
            <parameter name="amount" type="BigDecimal"/>
            <parameter name="preBalance" type="BigDecimal"/>
            <parameter name="postBalance" type="BigDecimal"/>
            <parameter name="finAccountTransId"/>
        </out-parameters>
        <actions>
            <set field="amount" from="amount.setScale(2, BigDecimal.ROUND_HALF_UP)"/>
            <set field="performedByUserId" from="ec.user.userId"/>

            <!-- do a for-update query to lock the FinancialAccount record -->
            <entity-find-one entity-name="mantle.account.financial.FinancialAccount" value-field="financialAccount"
                    for-update="true"/>
            <set field="preBalance" from="financialAccount.actualBalance ?: 0"/>

            <if condition="!fromPartyId"><set field="fromPartyId" from="financialAccount.ownerPartyId"/></if>
            <if condition="!toPartyId"><set field="toPartyId" from="financialAccount.organizationPartyId"/></if>

            <!-- this is a withdrawal, so subtract the amount -->
            <set field="amount" from="-amount"/>

            <set field="postBalance" from="preBalance + amount"/>
            <set field="finAccountTransTypeEnumId" value="FattWithdraw"/>
            <service-call name="create#mantle.account.financial.FinancialAccountTrans" in-map="context" out-map="context"/>

            <service-call name="update#mantle.account.financial.FinancialAccount"
                    in-map="[finAccountId:finAccountId, actualBalance:postBalance]"/>

            <if condition="finAccountAuthId">
                <!-- if there is an auth, expire it -->
                <service-call name="update#mantle.account.financial.FinancialAccountAuth"
                        in-map="[finAccountAuthId:finAccountAuthId, expireDate:ec.user.nowTimestamp]"/>
            </if>

            <service-call name="mantle.account.FinancialAccountServices.calculate#FinancialAccountTotals"
                    in-map="[finAccountId:finAccountId]" out-map="totalsOut"/>
            <set field="postBalance" from="totalsOut.actualBalance"/>
            <set field="differAmount" from="postBalance - preBalance"/>
            <if condition="differAmount != amount">
                <return error="true" message="Error adjusting financial account ${ec.resource.expand('FinancialAccountNameTemplate','',financialAccount)}, pre balance ${preBalance} and post balance ${postBalance} differ by ${differAmount} and not by transaction amount ${amount}"/>
            </if>
        </actions>
    </service>

    <service verb="authorize" noun="FinancialAccount">
        <in-parameters>
            <parameter name="finAccountId" required="true"/>
            <parameter name="amount" type="BigDecimal" required="true"/>
            <parameter name="authorizationDate" type="Timestamp" default-value="ec.user.nowTimestamp"/>
            <parameter name="expireDate" type="Timestamp" required="true"/><!-- TODO: default this based on some sort of setting? -->
        </in-parameters>
        <out-parameters>
            <parameter name="preAvailableBalance" type="BigDecimal"/>
            <parameter name="postAvailableBalance" type="BigDecimal"/>
            <parameter name="finAccountAuthId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.financial.FinancialAccount" value-field="financialAccount"
                    for-update="true"/>
            <set field="preAvailableBalance" from="financialAccount.availableBalance"/>

            <service-call name="create#mantle.account.financial.FinancialAccountAuth" in-map="context" out-map="context"/>

            <entity-find-one entity-name="mantle.account.financial.FinancialAccount" value-field="postFinancialAccount"/>
            <set field="postAvailableBalance" from="postFinancialAccount.actualBalance"/>

            <set field="differAmount" from="preAvailableBalance - postAvailableBalance"/>
            <if condition="differAmount != amount">
                <return error="true" message="Error adjusting financial account ${ec.resource.expand('FinancialAccountNameTemplate','',financialAccount)}, pre balance ${preAvailableBalance} and post balance ${postAvailableBalance} differ by [${differAmount}] and not by transaction amount ${amount}"/>
            </if>
        </actions>
    </service>
    <service verb="expire" noun="FinancialAccountAuth">
        <in-parameters>
            <parameter name="finAccountAuthId" required="true"/>
            <parameter name="expireDate" type="Timestamp" default="ec.user.nowTimestamp"/>
        </in-parameters>
        <actions>
            <service-call name="update#mantle.account.financial.FinancialAccountAuth" in-map="context"/>
        </actions>
    </service>

    <service verb="disburse" noun="FinancialAccount">
        <description>Disburse funds from a FinancialAccount through a Payment which will be in the Promised status
            (will need to be Authorized, then Delivered to post).</description>
        <implements service="mantle.account.FinancialAccountServices.withdraw#FinancialAccount"/>
        <in-parameters>
            <parameter name="paymentInstrumentEnumId" default-value="PiCompanyCheck"/>
            <parameter name="paymentMethodId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="finAccountTransId"/>
            <parameter name="paymentId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.account.financial.FinancialAccount" value-field="financialAccount"
                    for-update="true"/>

            <!-- create Payment first (then update after with finAccountTransId, because FinancialAccountTrans is create-only/immutable) -->
            <service-call name="mantle.account.PaymentServices.create#Payment" out-map="context"
                    in-map="[paymentTypeEnumId:'PtFinancialAccount', statusId:'PmntPromised', comments:comments,
                        fromPartyId:financialAccount.organizationPartyId, toPartyId:financialAccount.ownerPartyId,
                        amount:amount, amountUomId:financialAccount.currencyUomId, finAccountId:finAccountId,
                        paymentInstrumentEnumId:paymentInstrumentEnumId, paymentMethodId:paymentMethodId]"/>

            <!-- withdraw from FinancialAccount -->
            <service-call name="mantle.account.FinancialAccountServices.withdraw#FinancialAccount" out-map="context"
                    in-map="context"/>

            <!-- update Payment record, set finAccountTransId -->
            <service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, finAccountTransId:finAccountTransId]"/>
        </actions>
    </service>

    <!-- Financial Account Payment Processing Services -->
    <service verb="authorize" noun="FinancialAccountPayment">
        <implements service="mantle.account.PaymentServices.authorize#Payment"/>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
    <service verb="capture" noun="FinancialAccountPayment">
        <implements service="mantle.account.PaymentServices.capture#Payment"/>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
    <service verb="release" noun="FinancialAccountPayment">
        <implements service="mantle.account.PaymentServices.release#Payment"/>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
    <service verb="refund" noun="FinancialAccountPayment">
        <implements service="mantle.account.PaymentServices.refund#Payment"/>
        <actions>
            <!-- TODO: implement this... -->
        </actions>
    </service>
</services>
